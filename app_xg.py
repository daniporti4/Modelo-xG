# -*- coding: utf-8 -*-
"""app_xG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/155aDzN1xZLSOGu_wgLtDzAxF9Daup2dK
"""


import streamlit as st
import pandas as pd
import numpy as np
import joblib
from xgboost import XGBRegressor
import plotly.graph_objects as go
from streamlit_plotly_events import plotly_events


# Cargar modelo y encoder
modelo = joblib.load("modelo_prueba.pkl")
encoder = joblib.load("encoder_ohe.pkl")

st.title("Calculadora de xG")

# Columnas categóricas en orden
categorical_cols = [
    'shot_body_part', 'play_pattern', 'under_pressure',
    'shot_one_on_one', 'shot_open_goal', 'shot_aerial_won',
    'shot_first_time', 'shot_deflected', 'shot_technique', 'shot_type'
]

# Columnas numéricas
numeric_cols = ['distance', 'angle']

st.subheader("Haz clic en el campo para registrar el disparo")

# Crear figura del campo
fig = go.Figure()

fig.update_layout(
    xaxis=dict(range=[0, 120], showgrid=False, zeroline=False, visible=False),
    yaxis=dict(range=[0, 80], showgrid=False, zeroline=False, visible=False, autorange='reversed'),
    width=700,
    height=470,
    plot_bgcolor="green",
    margin=dict(l=10, r=10, t=10, b=10)
)

# Mostrar campo y capturar clic
click_result = plotly_events(fig, click_event=True, hover_event=False, override_height=470, return_click_data=True)

if click_result:
    x = click_result[0]["x"]
    y = click_result[0]["y"]
    st.success(f"Has hecho clic en: X = {int(x)}, Y = {int(y)}")
else:
    st.warning("Haz clic en el campo para seleccionar un disparo.")
    st.stop()

body_part = st.selectbox("Parte del cuerpo", ["Right Foot", "Left Foot", "Head", "Other"])
play_pattern = st.selectbox("Tipo de jugada", [
    'Regular Play', 'From Free Kick', 'From Throw In', 'From Corner',
    'From Counter', 'From Goal Kick', 'From Keeper', 'From Kick Off', 'Other'
])
shot_type = st.selectbox("Tipo de disparo", ['Open Play', 'Free Kick', 'Corner'])

shot_technique = st.selectbox("Técnica", [
    'Normal', 'Half Volley', 'Volley', 'Lob',
    'Overhead Kick', 'Diving Header', 'Backheel'
])

# Boleanos
under_pressure = st.checkbox("Bajo presión")
one_on_one = st.checkbox("Uno contra uno")
open_goal = st.checkbox("Portería vacía")
aerial_won = st.checkbox("Remate aéreo ganado")
first_time = st.checkbox("Disparo de primeras")
deflected = st.checkbox("Desviado")

# Calcular distancia y ángulo
goal_x, goal_y = 120, 40
distance = np.sqrt((goal_x - x)**2 + (goal_y - y)**2)

def calcular_angulo(x, y):
    left_post = np.array([120, 34])
    right_post = np.array([120, 46])
    shot_point = np.array([x, y])
    v1 = left_post - shot_point
    v2 = right_post - shot_point
    cos_angle = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))
    angle_rad = np.arccos(np.clip(cos_angle, -1.0, 1.0))
    return np.degrees(angle_rad)

angle = calcular_angulo(x, y)

# DataFrame de entrada
input_df = pd.DataFrame([{
    'shot_body_part': body_part,
    'play_pattern': play_pattern,
    'under_pressure': str(under_pressure),
    'shot_one_on_one': str(one_on_one),
    'shot_open_goal': str(open_goal),
    'shot_aerial_won': str(aerial_won),
    'shot_first_time': str(first_time),
    'shot_deflected': str(deflected),
    'shot_technique': shot_technique,
    'shot_type': shot_type
}])

# Codificar categóricas
X_cat = encoder.transform(input_df)
X_cat_df = pd.DataFrame(X_cat, columns=encoder.get_feature_names_out(), index=input_df.index)

# Añadir numéricas
X_num = pd.DataFrame([[distance, angle]], columns=numeric_cols)
X_final = pd.concat([X_num, X_cat_df], axis=1)

# Alinear columnas con el modelo
expected_features = modelo.get_booster().feature_names
for col in expected_features:
    if col not in X_final.columns:
        X_final[col] = 0.0
X_final = X_final[expected_features]

# Predecir
pred_xg = modelo.predict(X_final)[0]
st.success(f"xG estimado: **{pred_xg:.3f}**")
