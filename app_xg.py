# -*- coding: utf-8 -*-
"""app_xG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/155aDzN1xZLSOGu_wgLtDzAxF9Daup2dK
"""

import streamlit as st
import pickle
import numpy as np

# Cargar modelo
with open("modelo_prueba.pkl", "rb") as f:
    model = pickle.load(f)

st.title("Calculadora de xG")

# Distancia y ángulo (suponiendo que los calculas a partir de x, y)
x = st.slider("Coordenada X (0-120)", 0, 120, 60)
y = st.slider("Coordenada Y (0-80)", 0, 80, 40)

# Cálculo simple de distancia y ángulo desde el centro de la portería (asumiendo portería en x=120, y=40)
import math
dx = 120 - x
dy = abs(40 - y)
distance = (dx**2 + dy**2) ** 0.5
angle = math.atan2(7.32 * dx, dx**2 + dy**2) * (180 / math.pi)  # 7.32m = ancho de portería

# shot_body_part
body_part = st.selectbox("Parte del cuerpo", ["Left Foot", "Other", "Right Foot"])

# shot_outcome
outcome = st.selectbox("Resultado del disparo", ["Goal", "Off T", "Post", "Saved", "Saved Off Target", "Saved to Post", "Wayward"])

# play_pattern
play_pattern = st.selectbox("Patrón de juego", [
    "From Counter", "From Free Kick", "From Goal Kick", "From Keeper", "From Kick Off",
    "From Throw In", "Other", "Regular Play"
])

# Booleans
under_pressure = st.checkbox("¿Bajo presión?")
one_vs_one = st.checkbox("¿1vs1 con portero?")
open_goal = st.checkbox("¿Portería vacía?")
aerial_won = st.checkbox("¿Ganó disputa aérea?")
first_time = st.checkbox("¿Disparo de primeras?")
deflected = st.checkbox("¿Desviado?")

# shot_technique
technique = st.selectbox("Técnica", [
    "Diving Header", "Half Volley", "Lob", "Normal", "Overhead Kick", "Volley"
])

# shot_type
shot_type = st.selectbox("Tipo de jugada", ["Free Kick", "Open Play"])

def encode_onehot(value, valid_options):
    return [1 if value == opt else 0 for opt in valid_options]

features = [
    distance,
    angle,
    *encode_onehot(body_part, ["Left Foot", "Other", "Right Foot"]),
    *encode_onehot(outcome, ["Goal", "Off T", "Post", "Saved", "Saved Off Target", "Saved to Post", "Wayward"]),
    *encode_onehot(play_pattern, ["From Counter", "From Free Kick", "From Goal Kick", "From Keeper",
                                  "From Kick Off", "From Throw In", "Other", "Regular Play"]),
    int(under_pressure),
    int(one_vs_one),
    int(open_goal),
    int(aerial_won),
    int(first_time),
    int(deflected),
    *encode_onehot(technique, ["Diving Header", "Half Volley", "Lob", "Normal", "Overhead Kick", "Volley"]),
    *encode_onehot(shot_type, ["Free Kick", "Open Play"])
]

# Convertir a array y predecir
X = np.array([features])
pred_xg = model.predict(X)[0]

st.metric("xG estimado", f"{pred_xg:.3f}")
